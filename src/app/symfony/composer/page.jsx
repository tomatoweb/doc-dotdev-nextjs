'use client'
import React from 'react'
import CodeBlock from '@/app/components/CodeBlock'
import { Typography } from '@mui/material';
import Image from 'next/image';

const text = `composer install

    Composer va regarder si un fichier composer.lock existe.
    S'il existe, Composer va tÃ©lÃ©charger et installer les librairies
    avec la version spÃ©cifiÃ©e dans le fichier composer.lock
    S'il n'existe pas Composer va appeler "composer update"

composer update

    Composer va regarder le contenu du fichier composer.json
    Composer va tÃ©lÃ©charger et installer les versions les plus rÃ©centes
    des librairies
    en respectant les versions prÃ©cisÃ©es dans composer.json
    Pour finir, Composer va mettre Ã  jour le fichier composer.lock
    avec les numÃ©ros de versions qui viennent d'Ãªtre installÃ©es.


Conclusion

Le fichier composer.lock est trÃ¨s important
Il transcrit prÃ©cisÃ©ment toutes les versions 
des librairies installÃ©es.
Si on utilise un VCS comme GIT, ce fichier doit Ãªtre suivi (commitÃ©)
pour que toute l'Ã©quipe utilise les mÃªmes versions 
et ainsi avoir un workflow homogÃ¨ne.

Attention : Il ne faut jamais faire de "composer update" 
sur le server de production, seulement en dÃ©veloppement.
En effet, comme la commande va chercher les derniÃ¨res versions des librairies
on aura un dÃ©callage avec la version en dÃ©veloppement.`;

const page = () => {

  return (
    <main>
      <Typography variant='h6' component="div">
      ðŸš€  COMPOSER 
      </Typography>
      <CodeBlock text={text}/>
      <Image 
        className="rounded-lg" 
        src="/composer.jpg" 
        width={0}
        height={0}
        sizes="100vw"
        style={{ width: '100%', height: 'auto' }} alt=""
      />
      
    </main>
  )
}

export default page